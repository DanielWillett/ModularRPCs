//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DanielWillett.ModularRpcs.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Exceptions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Exceptions() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DanielWillett.ModularRpcs.Properties.Exceptions", typeof(Exceptions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection must be of type &apos;LoopbackRpcServerConnection&apos;..
        /// </summary>
        public static string ConnectionNotLoopback {
            get {
                return ResourceManager.GetString("ConnectionNotLoopback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ContiguousBuffer failed to separate out a message segment, likely due to bad data..
        /// </summary>
        public static string ContiguousBufferParseException {
            get {
                return ResourceManager.GetString("ContiguousBufferParseException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must pass either stream data or binary data to SendDataAsync..
        /// </summary>
        public static string DidNotPassAnyDataToRpcSendDataAsync {
            get {
                return ResourceManager.GetString("DidNotPassAnyDataToRpcSendDataAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constructor you&apos;re trying to use is not accessible or overridable by the proxy class. RPC send methods must be virtual or abstract (therefore non-static). To use internal constructors or methods, it&apos;s required to add &apos;[assembly: InternalsVisibleTo(&quot;ModularRPCs.Proxy&quot;)]&apos; to your AssemblyInfo file..
        /// </summary>
        public static string InternalsNotVisibleMemberAccessException {
            get {
                return ResourceManager.GetString("InternalsNotVisibleMemberAccessException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoint is not valid, expected clientside endpoint..
        /// </summary>
        public static string LoopbackRemoteConnectionExpectedClientsideEndpoint {
            get {
                return ResourceManager.GetString("LoopbackRemoteConnectionExpectedClientsideEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoint is not valid, expected serverside endpoint..
        /// </summary>
        public static string LoopbackRemoteConnectionExpectedServersideEndpoint {
            get {
                return ResourceManager.GetString("LoopbackRemoteConnectionExpectedServersideEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method must have a declaring type..
        /// </summary>
        public static string MethodHasNoDeclaringType {
            get {
                return ResourceManager.GetString("MethodHasNoDeclaringType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constructor you&apos;re trying to use was not found. Private constructors are not supported with RPC proxies..
        /// </summary>
        public static string PrivatesNotVisibleMissingMethodException {
            get {
                return ResourceManager.GetString("PrivatesNotVisibleMissingMethodException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This RPC connection is closed..
        /// </summary>
        public static string RpcConnectionClosedException {
            get {
                return ResourceManager.GetString("RpcConnectionClosedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint data from a message could not be linked to an invocation point..
        /// </summary>
        public static string RpcEndpointNotFoundException {
            get {
                return ResourceManager.GetString("RpcEndpointNotFoundException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a fire-and-forget RPC and can not be awaited..
        /// </summary>
        public static string RpcFireAndForgetException {
            get {
                return ResourceManager.GetString("RpcFireAndForgetException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GetResult can not be explicitly called by user code..
        /// </summary>
        public static string RpcGetResultUsageException {
            get {
                return ResourceManager.GetString("RpcGetResultUsageException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead, likely due to bad data..
        /// </summary>
        public static string RpcOverheadParseException {
            get {
                return ResourceManager.GetString("RpcOverheadParseException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead because the buffer was too short..
        /// </summary>
        public static string RpcOverheadParseExceptionBufferRunOut {
            get {
                return ResourceManager.GetString("RpcOverheadParseExceptionBufferRunOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead because the stream ended too early..
        /// </summary>
        public static string RpcOverheadParseExceptionStreamRunOut {
            get {
                return ResourceManager.GetString("RpcOverheadParseExceptionStreamRunOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead, unknown RpcDescriptor: {0}..
        /// </summary>
        public static string RpcOverheadParseExceptionUnknownRpcDescriptor {
            get {
                return ResourceManager.GetString("RpcOverheadParseExceptionUnknownRpcDescriptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given type must not be sealed to be used as an RPC proxy..
        /// </summary>
        public static string TypeNotInheritable {
            get {
                return ResourceManager.GetString("TypeNotInheritable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given type and its declaring types must be public (or internal, given &apos;[assembly: InternalsVisibleTo(&quot;ModularRPCs.Proxy&quot;)]&apos; is in your AssemblyInfo file) to be used as an RPC proxy..
        /// </summary>
        public static string TypeNotPublic {
            get {
                return ResourceManager.GetString("TypeNotPublic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given type must be a reference type (not a value type)..
        /// </summary>
        public static string TypeNotReferenceType {
            get {
                return ResourceManager.GetString("TypeNotReferenceType", resourceCulture);
            }
        }
    }
}
