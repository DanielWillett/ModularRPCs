//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DanielWillett.ModularRpcs.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Exceptions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Exceptions() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DanielWillett.ModularRpcs.Properties.Exceptions", typeof(Exceptions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This BinaryTypeParser has IsVariableSize set to true but didn&apos;t override GetSize..
        /// </summary>
        public static string BinaryTypeParserNotVariableSizeGetSizeNotImplemented {
            get {
                return ResourceManager.GetString("BinaryTypeParserNotVariableSizeGetSizeNotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection must be of type &apos;LoopbackRpcServerConnection&apos;..
        /// </summary>
        public static string ConnectionNotLoopback {
            get {
                return ResourceManager.GetString("ConnectionNotLoopback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ContiguousBuffer failed to separate out a message segment, likely due to bad data..
        /// </summary>
        public static string ContiguousBufferParseException {
            get {
                return ResourceManager.GetString("ContiguousBufferParseException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must pass either stream data or binary data to SendDataAsync..
        /// </summary>
        public static string DidNotPassAnyDataToRpcSendDataAsync {
            get {
                return ResourceManager.GetString("DidNotPassAnyDataToRpcSendDataAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given identifier type is not valid. Expected: &apos;{0}&apos;, actual: &apos;{1}&apos;..
        /// </summary>
        public static string GetObjectByIdentifierIdentityTypeNotCorrectType {
            get {
                return ResourceManager.GetString("GetObjectByIdentifierIdentityTypeNotCorrectType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An {1} of {0}&apos;s identifier still had it&apos;s default value after the base constructor..
        /// </summary>
        public static string InstanceIdDefaultValue {
            get {
                return ResourceManager.GetString("InstanceIdDefaultValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An {1} of {0}&apos;s identifier was not set in the base constructor..
        /// </summary>
        public static string InstanceIdNotSet {
            get {
                return ResourceManager.GetString("InstanceIdNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An {1} of {0} and this id has already been registered..
        /// </summary>
        public static string InstanceWithThisIdAlreadyExists {
            get {
                return ResourceManager.GetString("InstanceWithThisIdAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constructor you&apos;re trying to use is not accessible or overridable by the proxy class. RPC send methods must be virtual or abstract (therefore non-static). To use internal constructors or methods, it&apos;s required to add &apos;[assembly: InternalsVisibleTo(&quot;ModularRPCs.Proxy&quot;)]&apos; to your AssemblyInfo file..
        /// </summary>
        public static string InternalsNotVisibleMemberAccessException {
            get {
                return ResourceManager.GetString("InternalsNotVisibleMemberAccessException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be of type &apos;IModularRpcRemoteConnection&apos;, &apos;IEnumerable&lt;IModularRpcRemoteConnection&gt;&apos;, or null..
        /// </summary>
        public static string InvokeRpcConnectionsInvalidType {
            get {
                return ResourceManager.GetString("InvokeRpcConnectionsInvalidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoint is not valid, expected clientside endpoint..
        /// </summary>
        public static string LoopbackRemoteConnectionExpectedClientsideEndpoint {
            get {
                return ResourceManager.GetString("LoopbackRemoteConnectionExpectedClientsideEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoint is not valid, expected serverside endpoint..
        /// </summary>
        public static string LoopbackRemoteConnectionExpectedServersideEndpoint {
            get {
                return ResourceManager.GetString("LoopbackRemoteConnectionExpectedServersideEndpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method must have a declaring type..
        /// </summary>
        public static string MethodHasNoDeclaringType {
            get {
                return ResourceManager.GetString("MethodHasNoDeclaringType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given method &apos;{0}&apos; was not a call/invoke method. It must be decorated with the RpcSendAttribute..
        /// </summary>
        public static string MethodNotCallMethod {
            get {
                return ResourceManager.GetString("MethodNotCallMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given method &apos;{0}&apos; was not a receive method. It must be decorated with the RpcReceiveAttribute..
        /// </summary>
        public static string MethodNotReceiveMethod {
            get {
                return ResourceManager.GetString("MethodNotReceiveMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given type is not able to have an identifier..
        /// </summary>
        public static string ObjectNotIdentifyableType {
            get {
                return ResourceManager.GetString("ObjectNotIdentifyableType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constructor you&apos;re trying to use was not found. Private constructors are not supported with RPC proxies..
        /// </summary>
        public static string PrivatesNotVisibleMissingMethodException {
            get {
                return ResourceManager.GetString("PrivatesNotVisibleMissingMethodException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This RPC connection is closed..
        /// </summary>
        public static string RpcConnectionClosedException {
            get {
                return ResourceManager.GetString("RpcConnectionClosedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint data from a message could not be linked to an invocation point..
        /// </summary>
        public static string RpcEndpointNotFoundException {
            get {
                return ResourceManager.GetString("RpcEndpointNotFoundException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The endpoint data from a message could not be linked to an invocation point. The signature hash was a mis-match, likely caused by a version mismatch between server and client..
        /// </summary>
        public static string RpcEndpointNotFoundExceptionMismatchHash {
            get {
                return ResourceManager.GetString("RpcEndpointNotFoundExceptionMismatchHash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to invoke this RPC ({0}) because returned RpcTasks must be marked as fire-and-forget with the RpcFireAndForgetAttribute, or just by returning void..
        /// </summary>
        public static string RpcFireAndForgetExceptionMultipleConnections {
            get {
                return ResourceManager.GetString("RpcFireAndForgetExceptionMultipleConnections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fire-and-forget methods can not return a value, such is the case in {0}..
        /// </summary>
        public static string RpcFireAndForgetExceptionReturnValue {
            get {
                return ResourceManager.GetString("RpcFireAndForgetExceptionReturnValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GetResult can not be explicitly called by user code..
        /// </summary>
        public static string RpcGetResultUsageException {
            get {
                return ResourceManager.GetString("RpcGetResultUsageException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An injected parameter in an RPC receive method is not able to be injected..
        /// </summary>
        public static string RpcInjectionException {
            get {
                return ResourceManager.GetString("RpcInjectionException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Injected parameter &apos;{0}&apos; of type {1} in method {2} is not able to be injected..
        /// </summary>
        public static string RpcInjectionExceptionInfo {
            get {
                return ResourceManager.GetString("RpcInjectionExceptionInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find an available instance of {0} to invoke {1} with..
        /// </summary>
        public static string RpcInjectionExceptionInstanceNull {
            get {
                return ResourceManager.GetString("RpcInjectionExceptionInstanceNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A parameter in an RPC is not serializable..
        /// </summary>
        public static string RpcInvalidParameterException {
            get {
                return ResourceManager.GetString("RpcInvalidParameterException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generic methods are not supported, as is the case with {0}..
        /// </summary>
        public static string RpcInvalidParameterExceptionGenericMethod {
            get {
                return ResourceManager.GetString("RpcInvalidParameterExceptionGenericMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter #{0}, {1} in {2} is not serializable. {3}..
        /// </summary>
        public static string RpcInvalidParameterExceptionInfo {
            get {
                return ResourceManager.GetString("RpcInvalidParameterExceptionInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter of type {0} is not serializable. {1}..
        /// </summary>
        public static string RpcInvalidParameterExceptionInfoNoParamInfo {
            get {
                return ResourceManager.GetString("RpcInvalidParameterExceptionInfoNoParamInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find an IBinaryTypeParser for the type.
        /// </summary>
        public static string RpcInvalidParameterExceptionNoParserFound {
            get {
                return ResourceManager.GetString("RpcInvalidParameterExceptionNoParserFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Out parameters are not supported.
        /// </summary>
        public static string RpcInvalidParameterExceptionOutMessage {
            get {
                return ResourceManager.GetString("RpcInvalidParameterExceptionOutMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return type of method &apos;{0}&apos; is not supported. It must be void, RpcTask, or RpcTask&lt;T&gt;..
        /// </summary>
        public static string RpcInvalidParameterExceptionReturnType {
            get {
                return ResourceManager.GetString("RpcInvalidParameterExceptionReturnType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; can not be injected in this context.
        /// </summary>
        public static string RpcInvalidParameterInvalidInjection {
            get {
                return ResourceManager.GetString("RpcInvalidParameterInvalidInjection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There can not be more than one connection arguments. If you need more than one, pass an IEnumerable&lt;IModularRpcRemoteConnection&gt;.
        /// </summary>
        public static string RpcInvalidParameterMultipleConnectionsInvokeMethod {
            get {
                return ResourceManager.GetString("RpcInvalidParameterMultipleConnectionsInvokeMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error invoking the RPC..
        /// </summary>
        public static string RpcInvocationException {
            get {
                return ResourceManager.GetString("RpcInvocationException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a {1} invoking RPC &apos;{0}&apos;. {2}..
        /// </summary>
        public static string RpcInvocationExceptionWithInvocationPointMessage {
            get {
                return ResourceManager.GetString("RpcInvocationExceptionWithInvocationPointMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no connections available to perform the given action..
        /// </summary>
        public static string RpcNoConnectionsException {
            get {
                return ResourceManager.GetString("RpcNoConnectionsException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no connections available in the connection lifetime when trying to invoke {0}..
        /// </summary>
        public static string RpcNoConnectionsExceptionConnectionLifetime {
            get {
                return ResourceManager.GetString("RpcNoConnectionsExceptionConnectionLifetime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This RPC caller was not inherited by a parent class. Make sure you&apos;re getting this service&apos;s object from the ProxyGenerator or that the service was registered using one of the Rpc IServiceCollection extensions..
        /// </summary>
        public static string RpcNotImplemented {
            get {
                return ResourceManager.GetString("RpcNotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer overflowed while writing an RPC&apos;s arguments..
        /// </summary>
        public static string RpcOverflowException {
            get {
                return ResourceManager.GetString("RpcOverflowException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer overflowed while writing from the binary type parser: &apos;{0}&apos;..
        /// </summary>
        public static string RpcOverflowExceptionIBinaryTypeParser {
            get {
                return ResourceManager.GetString("RpcOverflowExceptionIBinaryTypeParser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to encode endpoint for type &apos;{0}&apos;. The method name was longer than 65535 UTF8 bytes..
        /// </summary>
        public static string RpcOverflowExceptionMethodNameTooLong {
            get {
                return ResourceManager.GetString("RpcOverflowExceptionMethodNameTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to encode endpoint for type &apos;{0}&apos;, method &apos;{0}&apos;. A parameter type was longer than 65535 UTF8 bytes..
        /// </summary>
        public static string RpcOverflowExceptionParameterTypeNameTooLong {
            get {
                return ResourceManager.GetString("RpcOverflowExceptionParameterTypeNameTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to encode endpoint for type &apos;{0}&apos;, method &apos;{0}&apos;. There were more than 65535 arguments..
        /// </summary>
        public static string RpcOverflowExceptionTooManyArguments {
            get {
                return ResourceManager.GetString("RpcOverflowExceptionTooManyArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to encode endpoint for method &apos;{0}&apos;. The type name was longer than 65535 UTF8 bytes..
        /// </summary>
        public static string RpcOverflowExceptionTypeNameTooLong {
            get {
                return ResourceManager.GetString("RpcOverflowExceptionTypeNameTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead, likely due to bad data..
        /// </summary>
        public static string RpcOverheadParseException {
            get {
                return ResourceManager.GetString("RpcOverheadParseException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead because the buffer was too short..
        /// </summary>
        public static string RpcOverheadParseExceptionBufferRunOut {
            get {
                return ResourceManager.GetString("RpcOverheadParseExceptionBufferRunOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead because the declaring type was not available on the receving end..
        /// </summary>
        public static string RpcOverheadParseExceptionIdentifierDeclaringTypeNotFound {
            get {
                return ResourceManager.GetString("RpcOverheadParseExceptionIdentifierDeclaringTypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead because the identifier &apos;{0}&apos; has not been created locally..
        /// </summary>
        public static string RpcOverheadParseExceptionIdentifierNotExists {
            get {
                return ResourceManager.GetString("RpcOverheadParseExceptionIdentifierNotExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead because the type code &apos;{0}&apos; is not a known type code..
        /// </summary>
        public static string RpcOverheadParseExceptionInvalidTypeCode {
            get {
                return ResourceManager.GetString("RpcOverheadParseExceptionInvalidTypeCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead because the stream ended too early..
        /// </summary>
        public static string RpcOverheadParseExceptionStreamRunOut {
            get {
                return ResourceManager.GetString("RpcOverheadParseExceptionStreamRunOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead because the string identifier had a length well over the max, likely due to corrupted data..
        /// </summary>
        public static string RpcOverheadParseExceptionStringLengthOverflow {
            get {
                return ResourceManager.GetString("RpcOverheadParseExceptionStringLengthOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead because the identifier type &apos;{0}&apos; couldn&apos;t be found..
        /// </summary>
        public static string RpcOverheadParseExceptionUnknownIdentifierType {
            get {
                return ResourceManager.GetString("RpcOverheadParseExceptionUnknownIdentifierType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a proper overhead, unknown RpcDescriptor: {0}..
        /// </summary>
        public static string RpcOverheadParseExceptionUnknownRpcDescriptor {
            get {
                return ResourceManager.GetString("RpcOverheadParseExceptionUnknownRpcDescriptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to read a message, likely due to bad data..
        /// </summary>
        public static string RpcParseException {
            get {
                return ResourceManager.GetString("RpcParseException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a message because the buffer was too short..
        /// </summary>
        public static string RpcParseExceptionBufferRunOut {
            get {
                return ResourceManager.GetString("RpcParseExceptionBufferRunOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a message because the buffer was too short while reading from the binary type parser: &apos;{0}&apos;..
        /// </summary>
        public static string RpcParseExceptionBufferRunOutIBinaryTypeParser {
            get {
                return ResourceManager.GetString("RpcParseExceptionBufferRunOutIBinaryTypeParser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a message because the native int value was too long for this system while reading from the binary type parser: &apos;{0}&apos;..
        /// </summary>
        public static string RpcParseExceptionBufferRunOutNativeIntOverflow {
            get {
                return ResourceManager.GetString("RpcParseExceptionBufferRunOutNativeIntOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a message because the stream ended too early..
        /// </summary>
        public static string RpcParseExceptionStreamRunOut {
            get {
                return ResourceManager.GetString("RpcParseExceptionStreamRunOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RpcOverhead failed to parse a message because the stream ended too early while reading from the binary type parser: &apos;{0}&apos;..
        /// </summary>
        public static string RpcParseExceptionStreamRunOutIBinaryTypeParser {
            get {
                return ResourceManager.GetString("RpcParseExceptionStreamRunOutIBinaryTypeParser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given type must be a non-sealed, non-abstract class to be used as an RPC proxy..
        /// </summary>
        public static string TypeNotInheritable {
            get {
                return ResourceManager.GetString("TypeNotInheritable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given type and its declaring types must be public (or internal, given &apos;[assembly: InternalsVisibleTo(&quot;ModularRPCs.Proxy&quot;)]&apos; is in your AssemblyInfo file) to be used as an RPC proxy..
        /// </summary>
        public static string TypeNotPublic {
            get {
                return ResourceManager.GetString("TypeNotPublic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given type must be a reference type (not a value type)..
        /// </summary>
        public static string TypeNotReferenceType {
            get {
                return ResourceManager.GetString("TypeNotReferenceType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an unexpected error trying to find a known member: {0}..
        /// </summary>
        public static string UnexpectedMemberAccessExceptionFailedToFind {
            get {
                return ResourceManager.GetString("UnexpectedMemberAccessExceptionFailedToFind", resourceCulture);
            }
        }
    }
}
