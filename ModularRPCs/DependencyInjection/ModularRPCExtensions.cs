using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System;
using System.Threading;
using DanielWillett.ModularRpcs.Annotations;
using DanielWillett.ModularRpcs.Reflection;

namespace DanielWillett.ModularRpcs.DependencyInjection;

/// <summary>
/// Extensions for interacting between 
/// </summary>
public static class ModularRpcExtensions
{
    /// <summary>
    /// Adds the singleton instance at <see cref="ProxyGenerator.Instance"/> to the <paramref name="serviceCollection"/>.
    /// </summary>
    public static IServiceCollection AddProxyGenerator(this IServiceCollection serviceCollection)
    {
        serviceCollection.Add(new ServiceDescriptor(typeof(ProxyGenerator), ProxyGenerator.Instance));
        return serviceCollection;
    }

    /// <summary>
    /// Uses the registered <see cref="ILoggerFactory"/> to create and assign an <see cref="ILogger{ProxyGenerator}"/> for the <see cref="ProxyGenerator"/> singleton.
    /// </summary>
    /// <exception cref="InvalidOperationException">There is no service of type <see cref="ILoggerFactory"/>.</exception>
    public static IServiceProvider UseLoggingForProxyGenerator(this IServiceProvider serviceProvider)
    {
        ILoggerFactory logFactory = serviceProvider.GetRequiredService<ILoggerFactory>();
        ILogger<ProxyGenerator> logger = logFactory.CreateLogger<ProxyGenerator>();
        
        UseLoggingForProxyGenerator(logger);

        return serviceProvider;
    }

    /// <summary>
    /// Adds the given <see cref="ILogger{ProxyGenerator}"/> to the <see cref="ProxyGenerator"/> singleton.
    /// </summary>
    /// <exception cref="InvalidOperationException">There is no service of type <see cref="ILoggerFactory"/>.</exception>
    public static void UseLoggingForProxyGenerator(ILogger logger)
    {
        object? oldLogger = Interlocked.Exchange(ref ProxyGenerator.Instance.Logger, logger);
        if (oldLogger is not IDisposable disp)
            return;

        try
        {
            disp.Dispose();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, $"Error disposing old logger after adding new {logger.GetType().Name} logger.");
        }
    }

    /// <summary>
    /// Adds a class with RPC methods decorated with the <see cref="RpcSendAttribute"/> to an <see cref="IServiceCollection"/> with the given <paramref name="lifetime"/>.
    /// </summary>
    /// <remarks>This method adds a service of type <typeparamref name="TService"/> to the collection with an implementation type of the proxy type generated by <see cref="ProxyGenerator"/>.</remarks>
    public static IServiceCollection AddRpcService<TService>(this IServiceCollection serviceCollection, ServiceLifetime lifetime) where TService : class
    {
        Type type = ProxyGenerator.Instance.GetProxyType<TService>();

        serviceCollection.Add(new ServiceDescriptor(typeof(TService), type, lifetime));
        serviceCollection.Add(new ServiceDescriptor(type, static serviceProvider => serviceProvider.GetRequiredService<TService>(), lifetime));
        return serviceCollection;
    }

    /// <summary>
    /// Adds a class with RPC methods decorated with the <see cref="RpcSendAttribute"/> to an <see cref="IServiceCollection"/> with the given <paramref name="lifetime"/>.
    /// </summary>
    /// <remarks>This method adds a service of type <typeparamref name="TService"/> to the collection with an implementation type of the proxy type of <typeparamref name="TImplementation"/> generated by <see cref="ProxyGenerator"/>.</remarks>
    public static IServiceCollection AddRpcService<TService, TImplementation>(this IServiceCollection serviceCollection, ServiceLifetime lifetime) where TService : class where TImplementation : class
    {
        Type type = ProxyGenerator.Instance.GetProxyType<TImplementation>();

        serviceCollection.Add(new ServiceDescriptor(typeof(TService), type, lifetime));
        serviceCollection.Add(new ServiceDescriptor(type, static serviceProvider => serviceProvider.GetRequiredService<TService>(), lifetime));
        return serviceCollection;
    }

    /// <summary>
    /// Adds a class with RPC methods decorated with the <see cref="RpcSendAttribute"/> to an <see cref="IServiceCollection"/> with a <see langword="singleton"/> lifetime.
    /// </summary>
    /// <remarks>This method adds a service of type <typeparamref name="TService"/> to the collection with an implementation type of the proxy type generated by <see cref="ProxyGenerator"/>.</remarks>
    public static IServiceCollection AddRpcSingleton<TService>(this IServiceCollection serviceCollection) where TService : class
        => AddRpcService<TService>(serviceCollection, ServiceLifetime.Singleton);

    /// <summary>
    /// Adds a class with RPC methods decorated with the <see cref="RpcSendAttribute"/> to an <see cref="IServiceCollection"/> with a <see langword="singleton"/> lifetime.
    /// </summary>
    /// <remarks>This method adds a service of type <typeparamref name="TService"/> to the collection with an implementation type of the proxy type of <typeparamref name="TImplementation"/> generated by <see cref="ProxyGenerator"/>.</remarks>
    public static IServiceCollection AddRpcSingleton<TService, TImplementation>(this IServiceCollection serviceCollection) where TService : class where TImplementation : class
        => AddRpcService<TService, TImplementation>(serviceCollection, ServiceLifetime.Singleton);

    /// <summary>
    /// Adds a class with RPC methods decorated with the <see cref="RpcSendAttribute"/> to an <see cref="IServiceCollection"/> with a <see langword="scoped"/> lifetime.
    /// </summary>
    /// <remarks>This method adds a service of type <typeparamref name="TService"/> to the collection with an implementation type of the proxy type generated by <see cref="ProxyGenerator"/>.</remarks>
    public static IServiceCollection AddRpcScoped<TService>(this IServiceCollection serviceCollection) where TService : class
        => AddRpcService<TService>(serviceCollection, ServiceLifetime.Scoped);

    /// <summary>
    /// Adds a class with RPC methods decorated with the <see cref="RpcSendAttribute"/> to an <see cref="IServiceCollection"/> with a <see langword="scoped"/> lifetime.
    /// </summary>
    /// <remarks>This method adds a service of type <typeparamref name="TService"/> to the collection with an implementation type of the proxy type of <typeparamref name="TImplementation"/> generated by <see cref="ProxyGenerator"/>.</remarks>
    public static IServiceCollection AddRpcScoped<TService, TImplementation>(this IServiceCollection serviceCollection) where TService : class where TImplementation : class
        => AddRpcService<TService, TImplementation>(serviceCollection, ServiceLifetime.Scoped);

    /// <summary>
    /// Adds a class with RPC methods decorated with the <see cref="RpcSendAttribute"/> to an <see cref="IServiceCollection"/> with a <see langword="transient"/> lifetime.
    /// </summary>
    /// <remarks>This method adds a service of type <typeparamref name="TService"/> to the collection with an implementation type of the proxy type generated by <see cref="ProxyGenerator"/>.</remarks>
    public static IServiceCollection AddRpcTransient<TService>(this IServiceCollection serviceCollection) where TService : class
        => AddRpcService<TService>(serviceCollection, ServiceLifetime.Transient);

    /// <summary>
    /// Adds a class with RPC methods decorated with the <see cref="RpcSendAttribute"/> to an <see cref="IServiceCollection"/> with a <see langword="transient"/> lifetime.
    /// </summary>
    /// <remarks>This method adds a service of type <typeparamref name="TService"/> to the collection with an implementation type of the proxy type of <typeparamref name="TImplementation"/> generated by <see cref="ProxyGenerator"/>.</remarks>
    public static IServiceCollection AddRpcTransient<TService, TImplementation>(this IServiceCollection serviceCollection) where TService : class where TImplementation : class
        => AddRpcService<TService, TImplementation>(serviceCollection, ServiceLifetime.Transient);
}